/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace RestaurantReviews {
  export type RestaurantStruct = {
    id: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    url_ipfs: PromiseOrValue<string>;
    reviewIds: PromiseOrValue<BigNumberish>[];
    rating: PromiseOrValue<BigNumberish>;
    tableLand: PromiseOrValue<string>;
  };

  export type RestaurantStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber[],
    BigNumber,
    string
  ] & {
    id: BigNumber;
    name: string;
    url_ipfs: string;
    reviewIds: BigNumber[];
    rating: BigNumber;
    tableLand: string;
  };
}

export interface RestaurantReviewsInterface extends utils.Interface {
  functions: {
    "addRestaurant(string,string,uint256,string)": FunctionFragment;
    "addReview(uint256,string)": FunctionFragment;
    "getAllRestaurants()": FunctionFragment;
    "getRestaurant(uint256)": FunctionFragment;
    "getReviewsByRestaurant(uint256)": FunctionFragment;
    "restaurantCount()": FunctionFragment;
    "restaurants(uint256)": FunctionFragment;
    "reviewCount()": FunctionFragment;
    "reviews(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addRestaurant"
      | "addReview"
      | "getAllRestaurants"
      | "getRestaurant"
      | "getReviewsByRestaurant"
      | "restaurantCount"
      | "restaurants"
      | "reviewCount"
      | "reviews"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addRestaurant",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addReview",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRestaurants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRestaurant",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReviewsByRestaurant",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "restaurantCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restaurants",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviews",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addRestaurant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addReview", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllRestaurants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRestaurant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReviewsByRestaurant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restaurantCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restaurants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reviews", data: BytesLike): Result;

  events: {
    "newRestaurant(uint256,string,string,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "newRestaurant"): EventFragment;
}

export interface newRestaurantEventObject {
  id: BigNumber;
  name: string;
  url_ipfs: string;
  rating: BigNumber;
  tableLand: string;
}
export type newRestaurantEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  newRestaurantEventObject
>;

export type newRestaurantEventFilter = TypedEventFilter<newRestaurantEvent>;

export interface RestaurantReviews extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RestaurantReviewsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addRestaurant(
      _name: PromiseOrValue<string>,
      _url_ipfs: PromiseOrValue<string>,
      _rating: PromiseOrValue<BigNumberish>,
      _tableLand: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addReview(
      _restaurantId: PromiseOrValue<BigNumberish>,
      _url_ipfs: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllRestaurants(
      overrides?: CallOverrides
    ): Promise<[RestaurantReviews.RestaurantStructOutput[]]>;

    getRestaurant(
      _restaurantId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, string, BigNumber[], BigNumber]>;

    getReviewsByRestaurant(
      _restaurantId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    restaurantCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    restaurants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, string] & {
        id: BigNumber;
        name: string;
        url_ipfs: string;
        rating: BigNumber;
        tableLand: string;
      }
    >;

    reviewCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    reviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        id: BigNumber;
        restaurantId: BigNumber;
        url_ipfs: string;
      }
    >;
  };

  addRestaurant(
    _name: PromiseOrValue<string>,
    _url_ipfs: PromiseOrValue<string>,
    _rating: PromiseOrValue<BigNumberish>,
    _tableLand: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addReview(
    _restaurantId: PromiseOrValue<BigNumberish>,
    _url_ipfs: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllRestaurants(
    overrides?: CallOverrides
  ): Promise<RestaurantReviews.RestaurantStructOutput[]>;

  getRestaurant(
    _restaurantId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string, string, BigNumber[], BigNumber]>;

  getReviewsByRestaurant(
    _restaurantId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  restaurantCount(overrides?: CallOverrides): Promise<BigNumber>;

  restaurants(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, string] & {
      id: BigNumber;
      name: string;
      url_ipfs: string;
      rating: BigNumber;
      tableLand: string;
    }
  >;

  reviewCount(overrides?: CallOverrides): Promise<BigNumber>;

  reviews(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      id: BigNumber;
      restaurantId: BigNumber;
      url_ipfs: string;
    }
  >;

  callStatic: {
    addRestaurant(
      _name: PromiseOrValue<string>,
      _url_ipfs: PromiseOrValue<string>,
      _rating: PromiseOrValue<BigNumberish>,
      _tableLand: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addReview(
      _restaurantId: PromiseOrValue<BigNumberish>,
      _url_ipfs: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllRestaurants(
      overrides?: CallOverrides
    ): Promise<RestaurantReviews.RestaurantStructOutput[]>;

    getRestaurant(
      _restaurantId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, string, BigNumber[], BigNumber]>;

    getReviewsByRestaurant(
      _restaurantId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    restaurantCount(overrides?: CallOverrides): Promise<BigNumber>;

    restaurants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, string] & {
        id: BigNumber;
        name: string;
        url_ipfs: string;
        rating: BigNumber;
        tableLand: string;
      }
    >;

    reviewCount(overrides?: CallOverrides): Promise<BigNumber>;

    reviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        id: BigNumber;
        restaurantId: BigNumber;
        url_ipfs: string;
      }
    >;
  };

  filters: {
    "newRestaurant(uint256,string,string,uint256,string)"(
      id?: null,
      name?: null,
      url_ipfs?: null,
      rating?: null,
      tableLand?: null
    ): newRestaurantEventFilter;
    newRestaurant(
      id?: null,
      name?: null,
      url_ipfs?: null,
      rating?: null,
      tableLand?: null
    ): newRestaurantEventFilter;
  };

  estimateGas: {
    addRestaurant(
      _name: PromiseOrValue<string>,
      _url_ipfs: PromiseOrValue<string>,
      _rating: PromiseOrValue<BigNumberish>,
      _tableLand: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addReview(
      _restaurantId: PromiseOrValue<BigNumberish>,
      _url_ipfs: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllRestaurants(overrides?: CallOverrides): Promise<BigNumber>;

    getRestaurant(
      _restaurantId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReviewsByRestaurant(
      _restaurantId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    restaurantCount(overrides?: CallOverrides): Promise<BigNumber>;

    restaurants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reviewCount(overrides?: CallOverrides): Promise<BigNumber>;

    reviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRestaurant(
      _name: PromiseOrValue<string>,
      _url_ipfs: PromiseOrValue<string>,
      _rating: PromiseOrValue<BigNumberish>,
      _tableLand: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addReview(
      _restaurantId: PromiseOrValue<BigNumberish>,
      _url_ipfs: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllRestaurants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRestaurant(
      _restaurantId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReviewsByRestaurant(
      _restaurantId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    restaurantCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    restaurants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reviewCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
